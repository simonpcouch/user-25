---
title: ""
format: 
  revealjs:
    theme: [default, custom.scss]
    footer: '<span style="color:#f4c19a;">github.com/simonpcouch/user-25</span>'
editor: source
knitr:
  opts_chunk: 
    echo: true
    collapse: true
    comment: "#>"
---

<span style="color:#b17dc3; font-size:270%; font-weight:bold;">Small boosts, here and there</span> <a href="https://simonpcouch.github.io/chores/"><img src="figures/chores-hex.png" alt="The hex sticker for the chores package: A cartoon of a light orange blob happily holding a clipboard with a checklist in one hand. The blob is set against a purple hexagon outlined in a lighter orange. The word 'chores' is written diagonally in white in the upper right of the purple hexagon." align="right" height="340"/></a>

<br><br><br>
_Simon Couch_ - @simonpcouch

Open Source Group @ Posit, R / LLMs

<!-- Rather than writing an entire R package or carrying out a data analysis in one fell swoop, I’m interested in large language models (LLMs) doing things for me that I don’t like to do: tedious little refactors, transitioning from deprecated APIs, and templating out boilerplate. Chores, if you will. This talk introduces chores, an R package implementing an extensible library of LLM assistants to help with repetitive but hard-to-automate tasks. -->

## Example

<!-- As an R package developer, one thing I do many times a day is write R function documentation using [roxygen2](https://roxygen2.r-lib.org/). For example, imagine I'm working on this function: -->

![](figures/1-source.png){fig-align="center"}

```{r}
#| label: key-get
#| include: false
key_get <- function(name, error_call = rlang::caller_env()) {
  val <- Sys.getenv(name)
  if (!identical(val, "")) {
    val
  } else {
    cli::cli_abort(
      "Can't find env var {.envvar {name}}.",
      call = error_call
    )
  }
}
```

## Example

<!-- The function grabs the value of an environmental variable, providing a nicely formatted error message if it can't find it. For example, the `HOME` environmental variable shows my home folder on macOS: -->

```{r}
#| label: grab-home
key_get("HOME")
```

<!-- This variable doesn't exist, though: -->

<br><br>

```{r}
#| label: trigger-error
#| error: true
key_get("IM_A_SILLY_GOOSE")
```

<!-- This function is ready to export from my package. So, the next step is to write inline documentation using roxygen2. Before I can write about how this function is connected to other topics in my package and any interesting notes about how it can be used, there's 100-characters-or-so of boilerplate that basically follows directly from the source code of the function. e.g. there are two arguments—`name`and `error_call`—and one of them has a default argument, and so on. That will take me a minute or so to type out, and I won't really enjoy doing so.

What if I didn't have to? The chores package supplies a helper for this task: scaffolding out minimal roxygen2 documentation. -->

---

{{< video figures/chore-roxygen.mov >}}

<!-- In the above video, I:

-   Select my function,

-   Press a keyboard shortcut,

-   Select the "roxygen" helper from a dropdown, and

-   Press \[Enter\]

At that point, inline roxygen2 comments begin streaming into my document about my function. Notably, the output is quite minimal; the `@param` entries just give the argument name and a description of their type, there's a brief `@returns` section, and an `@export` tag. These are the bits of roxygen2 boilerplate that I would likely have written almost exactly the same if I had done so myself. Once this boilerplate is in place, I can check over it and add notes on the interesting parts of what the function does. This is a minute worth of work I wouldn't particularly enjoy doing—and that would otherwise be quite difficult to automate without LLMs—done for me. -->

# How it works

## How it works

* The user:
  * ...makes a code selection
  * ..triggers the addin and selects a helper
* The selected helper is matched up with its prompt
* `c(helper_prompt, selection)` is sent to the LLM
* The response is written to the editor using rstudioapi

## How it works

* The user:
  * ...makes a code selection
  * ..triggers the addin and selects a helper
* <span style="color: #e2d6e6;">The selected helper is matched up with its prompt</span>
* <span style="color: #e2d6e6;">c(helper_prompt, selection) is sent to the LLM</span>
* <span style="color: #e2d6e6;">The response is written to the editor using rstudioapi</span>


## How it works

![](figures/1-source.png){fig-align="center"}

## How it works

![](figures/2-source.png){fig-align="center"}

## How it works

![](figures/3-source.png){fig-align="center"}

## How it works

* The user:
  * ...makes a code selection
  * ..triggers the addin and selects a helper
* <span style="color: #e2d6e6;">The selected helper is matched up with its prompt</span>
* <span style="color: #e2d6e6;">c(helper_prompt, selection) is sent to the LLM</span>
* <span style="color: #e2d6e6;">The response is written to the editor using rstudioapi</span>

## How it works

* The user:
  * ...makes a code selection
  * ..triggers the addin and selects a helper
* The selected helper is matched up with its prompt
* <span style="color: #e2d6e6;">c(helper_prompt, selection) is sent to the LLM</span>
* <span style="color: #e2d6e6;">The response is written to the editor using rstudioapi</span>

## How it works

<!-- The chores package manages a directory of markdown files, each of which contains instructions on how to do a certain task, or "prompts." Here's the current prompt associated with the roxygen chore: -->

A _prompt_ defines the desired behavior:

<div style="height: 400px; overflow-y: auto; border: 1px solid #ddd; border-radius: 10px; padding: 20px; background-color: #f8f9fa; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); font-size: 0.5em;">

**Templating function documentation**

You are a terse assistant designed to help R package developers quickly template out their function documentation using roxygen2. Given some highlighted function code, return minimal documentation on the function's parameters and return type. Beyond those two elements, be sparing so as not to describe things you don't have context for. Respond with *only* R `#'` roxygen2 comments---no backticks or newlines around the response, no further commentary.

For function parameters in `@params`, describe each according to their type (e.g. "A numeric vector" or "A single string") and note if the parameter isn't required by writing "Optional" if it has a default value. If the parameters have a default enum (e.g. `arg = c("a", "b", "c")`), write them out as 'one of `"a"`, `"b"`, or `"c"`.' If there are ellipses in the function signature, note what happens to them. If they're checked with `rlang::check_dots_empty()` or otherwise, document them as "Currently unused; must be empty." If the ellipses are passed along to another function, note which function they're passed to.

For the return type in `@returns`, note any important errors or warnings that might occur and under what conditions. If the `output` is returned with `invisible(output)`, note that it's returned "invisibly."

**Here are some examples:**

Given:
```r
key_get <- function(name, error_call = caller_env()) {
  val <- Sys.getenv(name)
  if (!identical(val, "")) {
    val
  } else {
    if (is_testing()) {
      testthat::skip(sprintf("%s env var is not configured", name))
    } else {
      cli::cli_abort("Can't find env var {.code {name}}.", call = error_call)
    }
  }
}
```

Reply with:
```r
#' Get key
#'
#' @description
#' A short description...
#' 
#' @param name A single string.
#' @param error_call A call to mention in error messages. Optional.
#'
#' @returns 
#' If found, the value corresponding to the provided `name`. Otherwise,
#' the function will error.
#'
#' @export
```

Given:
```r
chat_perform <- function(provider,
                         mode = c("value", "stream", "async-stream", "async-value"),
                         turns,
                         tools = list(),
                         extra_args = list()) {

  mode <- arg_match(mode)
  stream <- mode %in% c("stream", "async-stream")

  req <- chat_request(
    provider = provider,
    turns = turns,
    tools = tools,
    stream = stream,
    extra_args = extra_args
  )

  switch(mode,
    "value" = chat_perform_value(provider, req),
    "stream" = chat_perform_stream(provider, req),
    "async-value" = chat_perform_async_value(provider, req),
    "async-stream" = chat_perform_async_stream(provider, req)
  )
}
```

Reply with:
```r
#' Perform chat
#'
#' @description
#' A short description...
#' 
#' @param provider A provider.
#' @param mode One of `"value"`, `"stream"`, `"async-stream"`, or `"async-value"`.
#' @param turns Turns.
#' @param tools Optional. A list of tools.
#' @param extra_args Optional. A list of extra arguments.
#'
#' @returns 
#' A result.
#'
#' @export
```

Given:
```r
check_args <- function(fn, ...) {
  rlang::check_dots_empty()
  arg_names <- names(formals(fn))
  if (length(arg_names) < 2) {
    cli::cli_abort("Function must have at least two arguments.", .internal = TRUE)
  } else if (arg_names[[1]] != "self") {
    cli::cli_abort("First argument must be {.arg self}.", .internal = TRUE)
  } else if (arg_names[[2]] != "private") {
    cli::cli_abort("Second argument must be {.arg private}.", .internal = TRUE)
  }
  invisible(fn)
}
```

Reply with:
```r
#' Check a function's arguments
#'
#' @description
#' A short description...
#' 
#' @param fn A function.
#' @param ... Currently unused; must be empty.
#'
#' @returns 
#' `fn`, invisibly. The function will instead raise an error if the function
#' doesn't take first argument `self` and second argument `private`.
#'
#' @export
```

When two functions are supplied, only provide documentation for the first function, only making use of later functions as additional context. For example:

Given:
```r
check_args <- function(fn, ...) {
  rlang::check_dots_empty()
  arg_names <- names(formals(fn))
  if (length(arg_names) < 2) {
    error_less_than_two_args()
  } else if (arg_names[[1]] != "self") {
    cli::cli_abort("First argument must be {.arg self}.", .internal = TRUE)
  } else if (arg_names[[2]] != "private") {
    cli::cli_abort("Second argument must be {.arg private}.", .internal = TRUE)
  }
  invisible(fn)
}

error_less_than_two_args <- function(call = caller_env()) {
  cli::cli_abort("Function must have at least two arguments.", call = call, .internal = TRUE)
}
```
 
Reply with:
```r
#' Check a function's arguments
#'
#' @description
#' A short description...
#' 
#' @param fn A function.
#' @param ... Currently unused; must be empty.
#'
#' @returns 
#' `fn`, invisibly. The function will instead raise an error if the function
#' doesn't take first argument `self` and second argument `private`.
#'
#' @export
```

</div>

## How it works

* The user:
  * ...makes a code selection
  * ..triggers the addin and selects a helper
* The selected helper is matched up with its prompt
* <span style="color: #e2d6e6;">c(helper_prompt, selection) is sent to the LLM</span>
* <span style="color: #e2d6e6;">The response is written to the editor using rstudioapi</span>

## How it works

* The user:
  * ...makes a code selection
  * ..triggers the addin and selects a helper
* The selected helper is matched up with its prompt
* `c(helper_prompt, selection)` is sent to the LLM
* <span style="color: #e2d6e6;">The response is written to the editor using rstudioapi</span>


## How it works

<!-- When a prompt file lives in the chores directory, the name of the file appears in that dropdown shown in the video. Then, when you select a chore from the dropdown, its associated prompt is submitted to the model along with the code selection you've made using ellmer. The response from the model is then written to your file as it's received.
 -->

If you're an ellmer user, writing that out yourself might look like:

```{r}
#| label: chat-anthropic
#| eval: false
library(ellmer)

ch <- chat_anthropic(system_prompt = the_prompt_from_last_slide)
 
ch$chat("<the selected code>")
#> #' The documentation for the selected code.
#> #' 
#> #' Yada yada yada.
```

## How it works

* The user:
  * ...makes a code selection
  * ..triggers the addin and selects a helper
* The selected helper is matched up with its prompt
* `c(helper_prompt, selection)` is sent to the LLM
* <span style="color: #e2d6e6;">The response is written to the editor using rstudioapi</span>

## How it works

* The user:
  * ...makes a code selection
  * ..triggers the addin and selects a helper
* The selected helper is matched up with its prompt
* `c(helper_prompt, selection)` is sent to the LLM
* The response is written to the editor using rstudioapi

## How it works

![](figures/4-source.png){fig-align="center"}

## What's possible

The package ships with helpers for R package development:

* Templating roxygen documentation
* Transitioning erroring code to use the cli package
* Transitioning testthat code to use the 3rd edition

## What's possible

Any coding task that:

1) Can be described in a markdown file
2) Can be applied with a code selection as context

. . .

In _either_ RStudio or Positron!

<!--  ## What's possible -->

<!-- The [roxygen helper](https://simonpcouch.github.io/chores/reference/roxygen_helper.html) is one of three helpers supplied with the chores package. There's also a [testthat helper](https://simonpcouch.github.io/chores/reference/testthat_helper.html), which transitions unit testing code to the third edition of testthat, and a [cli helper](https://simonpcouch.github.io/chores/reference/cli_helper.html), which transitions erroring code to use the cli package. These three helpers that ship with the package are focused on R package development, as that's where I've gotten the most mileage out of the interface. -->

<!-- That said, the package allows you to [write your own helpers](https://simonpcouch.github.io/chores/articles/custom.html), and all that that takes is a couple paragraphs and an example or two in a markdown file. The [chores gallery](https://simonpcouch.github.io/chores/articles/gallery.html) highlights various custom helpers folks have written since the package came to be: -->

<!-- <iframe 
  src="https://simonpcouch.github.io/chores/articles/gallery.html" 
  width="100%" 
  height="500px" 
  style="border: 1px solid #ddd; border-radius: 10px; overflow: auto; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);">
  Your browser does not support iframes.
</iframe> -->

<!-- For example, Hannah Frick wrote [a helper to migrate code chunk options](https://gist.github.com/hfrick/1ca8fc2cb2a4409b743e8120c6cc2223) from R Markdown to Quarto format, and Hadley Wickham wrote [a helper to polish NEWS changelogs](https://gist.github.com/simonpcouch/8dbb3cd1fd79f9525bc1476d6fa7b668) before package releases. If you write your own helper prompt and would like it to be featured in the gallery, I'd be glad to review your pull request! -->

# Choosing an LLM

## Choosing an LLM

<br>

How much do chore helpers cost to use?

<br>

About $1 per 100 refactorings with Claude Sonnet 4.

## Choosing an LLM

Cheaper models are less performant:

```{r}
#| label: plot-helper-costs
#| echo: false
#| fig-alt: "ggplot2 scatter plot showing LLM evaluation scores vs pricing. Y-axis: evaluation score (0.57-0.95). X-axis: price per 100 refactorings ($0.01-$10, log scale). Models clustered by provider: Anthropic (red), Google/Gemini (green), OpenAI (blue). Gemini models achieve highest scores (0.90) at mid-range pricing ($0.10-0.30). Claude models show high scores at premium pricing ($10+). OpenAI models span lower scores across varied price points."
library(tidyverse)
library(ggrepel)
library(choreseval)

chores |>
  mutate(price = as.numeric(gsub("$", "", price, fixed = TRUE))) |>
  ggplot(aes(x = price, y = score, color = provider, label = model)) +
  geom_point() +
  geom_label_repel() +
  scale_x_log10(labels = scales::dollar_format()) +
  theme_minimal(base_size = 16) +
  labs(x = "Price (USD, per 100 refactorings)", y = "Evaluation score")
```

:::footer
<span style="color:#f4c19a;">https://simonpcouch.github.io/choreseval/</span>
:::

## Choosing an LLM

<br>

How about local LLMs?

. . . 

<br>

I'm trying! We may not be there quite yet.

:::footer
<span style="color:#f4c19a;">https://simonpcouch.github.io/choreseval/</span>
:::

## Choosing an LLM

![](figures/choreseval.png){fig-align="center"}

:::footer
<span style="color:#f4c19a;">https://simonpcouch.github.io/choreseval/</span>
:::

## Choosing an LLM

<br>

If privacy is less of a concern (i.e. the code you highlight is not sensitive IP), GitHub hosts many models with generous free tiers.

<br>

Use `chat_github()` with ellmer.

## Learn more

<br>

<span style="font-size:150%"><center>[github.com/simonpcouch/user-25]{style="color:#c46938;"}</center></span>

<br>

:::footer

:::
